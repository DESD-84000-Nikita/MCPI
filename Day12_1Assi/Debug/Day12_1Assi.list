
Day12_1Assi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001374  08001374  00002374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013b0  080013b0  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  080013b0  080013b0  000023b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080013b8  080013b8  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013b8  080013b8  000023b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013bc  080013bc  000023bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080013c0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          0000016c  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e02  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000900  00000000  00000000  00004e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a8  00000000  00000000  00005780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011b  00000000  00000000  00005928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019570  00000000  00000000  00005a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000023e9  00000000  00000000  0001efb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c44f  00000000  00000000  0002139c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ad7eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000980  00000000  00000000  000ad830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ae1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  000ae1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800135c 	.word	0x0800135c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	0800135c 	.word	0x0800135c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC_Init>:

#include "adc.h"
#include "i2c.h"
#include "switch.h"

void ADC_Init(void) {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
//    1. Enable GPIO peripheral clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000274:	4b11      	ldr	r3, [pc, #68]	@ (80002bc <ADC_Init+0x4c>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000278:	4a10      	ldr	r2, [pc, #64]	@ (80002bc <ADC_Init+0x4c>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6313      	str	r3, [r2, #48]	@ 0x30
//    2. Configure GPIO pin as analog mode (MODER = 0b11).
	GPIOA->MODER |= 3 << GPIO_MODER_MODE0_Pos;
 8000280:	4b0f      	ldr	r3, [pc, #60]	@ (80002c0 <ADC_Init+0x50>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0e      	ldr	r2, [pc, #56]	@ (80002c0 <ADC_Init+0x50>)
 8000286:	f043 0303 	orr.w	r3, r3, #3
 800028a:	6013      	str	r3, [r2, #0]
//    3. Enable ADC peripheral clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800028c:	4b0b      	ldr	r3, [pc, #44]	@ (80002bc <ADC_Init+0x4c>)
 800028e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000290:	4a0a      	ldr	r2, [pc, #40]	@ (80002bc <ADC_Init+0x4c>)
 8000292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000296:	6453      	str	r3, [r2, #68]	@ 0x44
//    4. Set ADC resolution as 12-bits (CR1 RES = 0b00) -- default
//    5. Enable single conversion (CR2 CONT = 0b0) -- default
//    6. Set number of conversions in a sequence (SQR1 L(3:0) = 0b000 for 1 conversion)
	ADC1->SQR1 |= (1-1) << ADC_SQR1_L_Pos;
 8000298:	4b0a      	ldr	r3, [pc, #40]	@ (80002c4 <ADC_Init+0x54>)
 800029a:	4a0a      	ldr	r2, [pc, #40]	@ (80002c4 <ADC_Init+0x54>)
 800029c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800029e:	62d3      	str	r3, [r2, #44]	@ 0x2c
//    7. Set channel number for conversions in sequence (e.g. SQR3 (5:0) = 0b00000 for channel 0).
	ADC1->SQR3 |= 0 << ADC_SQR3_SQ1_Pos;
 80002a0:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <ADC_Init+0x54>)
 80002a2:	4a08      	ldr	r2, [pc, #32]	@ (80002c4 <ADC_Init+0x54>)
 80002a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002a6:	6353      	str	r3, [r2, #52]	@ 0x34
//    8. Enable ADC (CR2 ADON=0b1)
	ADC1->CR2 |= ADC_CR2_ADON;
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <ADC_Init+0x54>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a05      	ldr	r2, [pc, #20]	@ (80002c4 <ADC_Init+0x54>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6093      	str	r3, [r2, #8]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020000 	.word	0x40020000
 80002c4:	40012000 	.word	0x40012000

080002c8 <ADC_GetValue>:

uint16_t ADC_GetValue(void) {
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
//    1. Start the conversion (CR2 SWSTART)
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80002cc:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <ADC_GetValue+0x2c>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	4a08      	ldr	r2, [pc, #32]	@ (80002f4 <ADC_GetValue+0x2c>)
 80002d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002d6:	6093      	str	r3, [r2, #8]
//    2. Wait for end of conversion (SR EOC bit)
	while(!(ADC1->SR & ADC_SR_EOC))
 80002d8:	bf00      	nop
 80002da:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <ADC_GetValue+0x2c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <ADC_GetValue+0x12>
		;
//    3. Read ADC data register (DR)
	return ADC1->DR;
 80002e6:	4b03      	ldr	r3, [pc, #12]	@ (80002f4 <ADC_GetValue+0x2c>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ea:	b29b      	uxth	r3, r3
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	40012000 	.word	0x40012000

080002f8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000300:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <DelayMs+0x44>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <DelayMs+0x48>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a0e      	ldr	r2, [pc, #56]	@ (8000344 <DelayMs+0x4c>)
 800030c:	fba2 2303 	umull	r2, r3, r2, r3
 8000310:	099b      	lsrs	r3, r3, #6
 8000312:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	68ba      	ldr	r2, [r7, #8]
 8000318:	fb02 f303 	mul.w	r3, r2, r3
 800031c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800031e:	bf00      	nop
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <DelayMs+0x44>)
 8000322:	685a      	ldr	r2, [r3, #4]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	1ad2      	subs	r2, r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	429a      	cmp	r2, r3
 800032c:	d3f8      	bcc.n	8000320 <DelayMs+0x28>
}
 800032e:	bf00      	nop
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e0001000 	.word	0xe0001000
 8000340:	20000000 	.word	0x20000000
 8000344:	10624dd3 	.word	0x10624dd3

08000348 <I2CStart>:



#include "i2c.h"

void I2CStart() {
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 800034c:	4b08      	ldr	r3, [pc, #32]	@ (8000370 <I2CStart+0x28>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a07      	ldr	r2, [pc, #28]	@ (8000370 <I2CStart+0x28>)
 8000352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000356:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000358:	bf00      	nop
 800035a:	4b05      	ldr	r3, [pc, #20]	@ (8000370 <I2CStart+0x28>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f9      	beq.n	800035a <I2CStart+0x12>
}
 8000366:	bf00      	nop
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40005400 	.word	0x40005400

08000374 <I2CStop>:

void I2CRepeatStart() {
	I2CStart();
}

void I2CStop() {
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000378:	4b08      	ldr	r3, [pc, #32]	@ (800039c <I2CStop+0x28>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a07      	ldr	r2, [pc, #28]	@ (800039c <I2CStop+0x28>)
 800037e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000382:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000384:	bf00      	nop
 8000386:	4b05      	ldr	r3, [pc, #20]	@ (800039c <I2CStop+0x28>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f003 0302 	and.w	r3, r3, #2
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0f9      	beq.n	8000386 <I2CStop+0x12>
}
 8000392:	bf00      	nop
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	40005400 	.word	0x40005400

080003a0 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 80003aa:	4a09      	ldr	r2, [pc, #36]	@ (80003d0 <I2CSendSlaveAddress+0x30>)
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80003b0:	bf00      	nop
 80003b2:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <I2CSendSlaveAddress+0x30>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f003 0302 	and.w	r3, r3, #2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0f9      	beq.n	80003b2 <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 80003be:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <I2CSendSlaveAddress+0x30>)
 80003c0:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 80003c2:	4b03      	ldr	r3, [pc, #12]	@ (80003d0 <I2CSendSlaveAddress+0x30>)
 80003c4:	699b      	ldr	r3, [r3, #24]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40005400 	.word	0x40005400

080003d4 <I2CSendData>:

void I2CSendData(uint8_t val) {
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80003de:	bf00      	nop
 80003e0:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <I2CSendData+0x38>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d0f9      	beq.n	80003e0 <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 80003ec:	4a07      	ldr	r2, [pc, #28]	@ (800040c <I2CSendData+0x38>)
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80003f2:	bf00      	nop
 80003f4:	4b05      	ldr	r3, [pc, #20]	@ (800040c <I2CSendData+0x38>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f003 0304 	and.w	r3, r3, #4
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0f9      	beq.n	80003f4 <I2CSendData+0x20>
}
 8000400:	bf00      	nop
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40005400 	.word	0x40005400

08000410 <I2CIsDeviceReady>:
	// read content and clear flags
	val = I2C1->DR;
	return val;
}

int I2CIsDeviceReady(uint8_t slaveaddr) {
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	f023 0301 	bic.w	r3, r3, #1
 8000420:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 8000422:	4a09      	ldr	r2, [pc, #36]	@ (8000448 <I2CIsDeviceReady+0x38>)
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000428:	bf00      	nop
 800042a:	4b07      	ldr	r3, [pc, #28]	@ (8000448 <I2CIsDeviceReady+0x38>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0302 	and.w	r3, r3, #2
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0f9      	beq.n	800042a <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 8000436:	4b04      	ldr	r3, [pc, #16]	@ (8000448 <I2CIsDeviceReady+0x38>)
 8000438:	699b      	ldr	r3, [r3, #24]
	return 1;
 800043a:	2301      	movs	r3, #1
}
 800043c:	4618      	mov	r0, r3
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40005400 	.word	0x40005400

0800044c <I2CInit>:

void I2CInit() {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000450:	4b43      	ldr	r3, [pc, #268]	@ (8000560 <I2CInit+0x114>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000454:	4a42      	ldr	r2, [pc, #264]	@ (8000560 <I2CInit+0x114>)
 8000456:	f043 0302 	orr.w	r3, r3, #2
 800045a:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 800045c:	2032      	movs	r0, #50	@ 0x32
 800045e:	f7ff ff4b 	bl	80002f8 <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000462:	4b3f      	ldr	r3, [pc, #252]	@ (8000560 <I2CInit+0x114>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000466:	4a3e      	ldr	r2, [pc, #248]	@ (8000560 <I2CInit+0x114>)
 8000468:	f043 0302 	orr.w	r3, r3, #2
 800046c:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2); // PB6
 800046e:	4b3d      	ldr	r3, [pc, #244]	@ (8000564 <I2CInit+0x118>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a3c      	ldr	r2, [pc, #240]	@ (8000564 <I2CInit+0x118>)
 8000474:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000478:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2); // AF
 800047a:	4b3a      	ldr	r3, [pc, #232]	@ (8000564 <I2CInit+0x118>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a39      	ldr	r2, [pc, #228]	@ (8000564 <I2CInit+0x118>)
 8000480:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000484:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);   // open-drain
 8000486:	4b37      	ldr	r3, [pc, #220]	@ (8000564 <I2CInit+0x118>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	4a36      	ldr	r2, [pc, #216]	@ (8000564 <I2CInit+0x118>)
 800048c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000490:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2); // no pull-up/down
 8000492:	4b34      	ldr	r3, [pc, #208]	@ (8000564 <I2CInit+0x118>)
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	4a33      	ldr	r2, [pc, #204]	@ (8000564 <I2CInit+0x118>)
 8000498:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800049c:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2); // PB7
 800049e:	4b31      	ldr	r3, [pc, #196]	@ (8000564 <I2CInit+0x118>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a30      	ldr	r2, [pc, #192]	@ (8000564 <I2CInit+0x118>)
 80004a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004a8:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2); // AF
 80004aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000564 <I2CInit+0x118>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000564 <I2CInit+0x118>)
 80004b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004b4:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);   // open-drain
 80004b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000564 <I2CInit+0x118>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000564 <I2CInit+0x118>)
 80004bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004c0:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2); // no pull-up/down
 80004c2:	4b28      	ldr	r3, [pc, #160]	@ (8000564 <I2CInit+0x118>)
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	4a27      	ldr	r2, [pc, #156]	@ (8000564 <I2CInit+0x118>)
 80004c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004cc:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 80004ce:	4b25      	ldr	r3, [pc, #148]	@ (8000564 <I2CInit+0x118>)
 80004d0:	6a1b      	ldr	r3, [r3, #32]
 80004d2:	4a24      	ldr	r2, [pc, #144]	@ (8000564 <I2CInit+0x118>)
 80004d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80004d8:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 80004da:	4b22      	ldr	r3, [pc, #136]	@ (8000564 <I2CInit+0x118>)
 80004dc:	6a1b      	ldr	r3, [r3, #32]
 80004de:	4a21      	ldr	r2, [pc, #132]	@ (8000564 <I2CInit+0x118>)
 80004e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80004e4:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80004e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000560 <I2CInit+0x114>)
 80004e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000560 <I2CInit+0x114>)
 80004ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004f0:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 80004f2:	2032      	movs	r0, #50	@ 0x32
 80004f4:	f7ff ff00 	bl	80002f8 <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <I2CInit+0x11c>)
 80004fa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80004fe:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000500:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <I2CInit+0x11c>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 8000506:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <I2CInit+0x11c>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	4a17      	ldr	r2, [pc, #92]	@ (8000568 <I2CInit+0x11c>)
 800050c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000510:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 8000512:	4b15      	ldr	r3, [pc, #84]	@ (8000568 <I2CInit+0x11c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a14      	ldr	r2, [pc, #80]	@ (8000568 <I2CInit+0x11c>)
 8000518:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800051c:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 800051e:	4b12      	ldr	r3, [pc, #72]	@ (8000568 <I2CInit+0x11c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a11      	ldr	r2, [pc, #68]	@ (8000568 <I2CInit+0x11c>)
 8000524:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000528:	6013      	str	r3, [r2, #0]


    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <I2CInit+0x11c>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	4a0e      	ldr	r2, [pc, #56]	@ (8000568 <I2CInit+0x11c>)
 8000530:	f043 0310 	orr.w	r3, r3, #16
 8000534:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <I2CInit+0x11c>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a0b      	ldr	r2, [pc, #44]	@ (8000568 <I2CInit+0x11c>)
 800053c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000540:	61d3      	str	r3, [r2, #28]
   I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 8000542:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <I2CInit+0x11c>)
 8000544:	6a1b      	ldr	r3, [r3, #32]
 8000546:	4a08      	ldr	r2, [pc, #32]	@ (8000568 <I2CInit+0x11c>)
 8000548:	f043 0311 	orr.w	r3, r3, #17
 800054c:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <I2CInit+0x11c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a05      	ldr	r2, [pc, #20]	@ (8000568 <I2CInit+0x11c>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6013      	str	r3, [r2, #0]
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40023800 	.word	0x40023800
 8000564:	40020400 	.word	0x40020400
 8000568:	40005400 	.word	0x40005400

0800056c <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000574:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <DelayMs+0x44>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800057a:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <DelayMs+0x48>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <DelayMs+0x4c>)
 8000580:	fba2 2303 	umull	r2, r3, r2, r3
 8000584:	099b      	lsrs	r3, r3, #6
 8000586:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	fb02 f303 	mul.w	r3, r2, r3
 8000590:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000592:	bf00      	nop
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <DelayMs+0x44>)
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	1ad2      	subs	r2, r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d3f8      	bcc.n	8000594 <DelayMs+0x28>
}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e0001000 	.word	0xe0001000
 80005b4:	20000000 	.word	0x20000000
 80005b8:	10624dd3 	.word	0x10624dd3

080005bc <LcdWriteByte>:



#include "i2c_lcd.h"

void LcdWriteByte(uint8_t val) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	I2CStart();
 80005c6:	f7ff febf 	bl	8000348 <I2CStart>
	I2CSendSlaveAddress(LCD_SLAVE_ADDR_W);
 80005ca:	204e      	movs	r0, #78	@ 0x4e
 80005cc:	f7ff fee8 	bl	80003a0 <I2CSendSlaveAddress>
	I2CSendData(val);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fefe 	bl	80003d4 <I2CSendData>
	I2CStop();
 80005d8:	f7ff fecc 	bl	8000374 <I2CStop>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <LcdWrite>:

void LcdWrite(uint8_t rs, uint8_t val) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	f023 030f 	bic.w	r3, r3, #15
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	011b      	lsls	r3, r3, #4
 8000600:	73bb      	strb	r3, [r7, #14]
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b80      	cmp	r3, #128	@ 0x80
 8000606:	bf14      	ite	ne
 8000608:	2301      	movne	r3, #1
 800060a:	2300      	moveq	r3, #0
 800060c:	b2db      	uxtb	r3, r3
 800060e:	737b      	strb	r3, [r7, #13]
	LcdWriteByte(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 8000610:	7bfa      	ldrb	r2, [r7, #15]
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	4313      	orrs	r3, r2
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f043 030c 	orr.w	r3, r3, #12
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffcc 	bl	80005bc <LcdWriteByte>
	DelayMs(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f7ff ffa1 	bl	800056c <DelayMs>
	LcdWriteByte(high | bvrs | BV(LCD_BL));
 800062a:	7bfa      	ldrb	r2, [r7, #15]
 800062c:	7b7b      	ldrb	r3, [r7, #13]
 800062e:	4313      	orrs	r3, r2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f043 0308 	orr.w	r3, r3, #8
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffbf 	bl	80005bc <LcdWriteByte>

	LcdWriteByte(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 800063e:	7bba      	ldrb	r2, [r7, #14]
 8000640:	7b7b      	ldrb	r3, [r7, #13]
 8000642:	4313      	orrs	r3, r2
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f043 030c 	orr.w	r3, r3, #12
 800064a:	b2db      	uxtb	r3, r3
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffb5 	bl	80005bc <LcdWriteByte>
	DelayMs(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff ff8a 	bl	800056c <DelayMs>
	LcdWriteByte(low | bvrs | BV(LCD_BL));
 8000658:	7bba      	ldrb	r2, [r7, #14]
 800065a:	7b7b      	ldrb	r3, [r7, #13]
 800065c:	4313      	orrs	r3, r2
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f043 0308 	orr.w	r3, r3, #8
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ffa8 	bl	80005bc <LcdWriteByte>
}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <LcdInit>:

// As per 4-bit initialization sequence mentioned HD44780 datasheet fig 24 (page 46)
int LcdInit() {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
	// wait for min 15 ms (for 5V)
	DelayMs(20);
 800067a:	2014      	movs	r0, #20
 800067c:	f7ff ff76 	bl	800056c <DelayMs>
	I2CInit();
 8000680:	f7ff fee4 	bl	800044c <I2CInit>
	// check if lcd is ready
	I2CStart();
 8000684:	f7ff fe60 	bl	8000348 <I2CStart>
	int ret = I2CIsDeviceReady(LCD_SLAVE_ADDR_W);
 8000688:	204e      	movs	r0, #78	@ 0x4e
 800068a:	f7ff fec1 	bl	8000410 <I2CIsDeviceReady>
 800068e:	6078      	str	r0, [r7, #4]
	I2CStop();
 8000690:	f7ff fe70 	bl	8000374 <I2CStop>
	if(!ret)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d101      	bne.n	800069e <LcdInit+0x2a>
		return 0;
 800069a:	2300      	movs	r3, #0
 800069c:	e04a      	b.n	8000734 <LcdInit+0xc0>

	// attention sequence
	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 800069e:	2034      	movs	r0, #52	@ 0x34
 80006a0:	f7ff ff8c 	bl	80005bc <LcdWriteByte>
	__NOP();
 80006a4:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 80006a6:	2030      	movs	r0, #48	@ 0x30
 80006a8:	f7ff ff88 	bl	80005bc <LcdWriteByte>
	DelayMs(5);
 80006ac:	2005      	movs	r0, #5
 80006ae:	f7ff ff5d 	bl	800056c <DelayMs>

	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 80006b2:	2034      	movs	r0, #52	@ 0x34
 80006b4:	f7ff ff82 	bl	80005bc <LcdWriteByte>
	__NOP();
 80006b8:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 80006ba:	2030      	movs	r0, #48	@ 0x30
 80006bc:	f7ff ff7e 	bl	80005bc <LcdWriteByte>
	DelayMs(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff ff53 	bl	800056c <DelayMs>

	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 80006c6:	2034      	movs	r0, #52	@ 0x34
 80006c8:	f7ff ff78 	bl	80005bc <LcdWriteByte>
	__NOP();
 80006cc:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 80006ce:	2030      	movs	r0, #48	@ 0x30
 80006d0:	f7ff ff74 	bl	80005bc <LcdWriteByte>
	DelayMs(3);
 80006d4:	2003      	movs	r0, #3
 80006d6:	f7ff ff49 	bl	800056c <DelayMs>

	LcdWriteByte(LCD_FN_SET_4BIT | BV(LCD_EN));
 80006da:	2024      	movs	r0, #36	@ 0x24
 80006dc:	f7ff ff6e 	bl	80005bc <LcdWriteByte>
	__NOP();
 80006e0:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_4BIT);
 80006e2:	2020      	movs	r0, #32
 80006e4:	f7ff ff6a 	bl	80005bc <LcdWriteByte>
	DelayMs(3);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f7ff ff3f 	bl	800056c <DelayMs>

	// lcd initialization
	LcdWriteByte(LCD_FN_SET_4BIT_2LINES);
 80006ee:	2028      	movs	r0, #40	@ 0x28
 80006f0:	f7ff ff64 	bl	80005bc <LcdWriteByte>
	DelayMs(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f7ff ff39 	bl	800056c <DelayMs>
	LcdWrite(LCD_CMD, LCD_DISP_CTRL);
 80006fa:	2108      	movs	r1, #8
 80006fc:	2080      	movs	r0, #128	@ 0x80
 80006fe:	f7ff ff71 	bl	80005e4 <LcdWrite>
	DelayMs(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ff32 	bl	800056c <DelayMs>
	LcdWrite(LCD_CMD, LCD_CLEAR);
 8000708:	2101      	movs	r1, #1
 800070a:	2080      	movs	r0, #128	@ 0x80
 800070c:	f7ff ff6a 	bl	80005e4 <LcdWrite>
	DelayMs(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff ff2b 	bl	800056c <DelayMs>
	LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
 8000716:	2106      	movs	r1, #6
 8000718:	2080      	movs	r0, #128	@ 0x80
 800071a:	f7ff ff63 	bl	80005e4 <LcdWrite>
	DelayMs(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff ff24 	bl	800056c <DelayMs>
	LcdWrite(LCD_CMD, LCD_DISP_ON);
 8000724:	210c      	movs	r1, #12
 8000726:	2080      	movs	r0, #128	@ 0x80
 8000728:	f7ff ff5c 	bl	80005e4 <LcdWrite>
	DelayMs(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff ff1d 	bl	800056c <DelayMs>
	return ret;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <LcdPuts>:

void LcdPuts(uint8_t line, char str[]) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
	int i;
	LcdWrite(LCD_CMD, line); // line address
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4619      	mov	r1, r3
 800074c:	2080      	movs	r0, #128	@ 0x80
 800074e:	f7ff ff49 	bl	80005e4 <LcdWrite>
	DelayMs(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff ff0a 	bl	800056c <DelayMs>
	for(i=0; str[i]!='\0'; i++)
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	e00a      	b.n	8000774 <LcdPuts+0x38>
		LcdWrite(LCD_DATA, str[i]);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	4413      	add	r3, r2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff3b 	bl	80005e4 <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	4413      	add	r3, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1ee      	bne.n	800075e <LcdPuts+0x22>
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
	char str[32];
	SystemInit();
 8000792:	f000 f8eb 	bl	800096c <SystemInit>
	uint16_t val;
	LcdInit();
 8000796:	f7ff ff6d 	bl	8000674 <LcdInit>
	ADC_Init();
 800079a:	f7ff fd69 	bl	8000270 <ADC_Init>
	SwitchInit(SWITCH);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 f838 	bl	8000814 <SwitchInit>

	while(1){
		while(exti0_flag==0)
 80007a4:	bf00      	nop
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <main+0x48>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d0fb      	beq.n	80007a6 <main+0x1a>
			;
		val = ADC_GetValue();
 80007ae:	f7ff fd8b 	bl	80002c8 <ADC_GetValue>
 80007b2:	4603      	mov	r3, r0
 80007b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
		sprintf(str, "ADC=%d",val);
 80007b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4907      	ldr	r1, [pc, #28]	@ (80007d8 <main+0x4c>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f935 	bl	8000a2c <siprintf>


		LcdPuts(LCD_LINE1,str);
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	2080      	movs	r0, #128	@ 0x80
 80007c8:	f7ff ffb8 	bl	800073c <LcdPuts>

		exti0_flag=0;
 80007cc:	4b01      	ldr	r3, [pc, #4]	@ (80007d4 <main+0x48>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
		while(exti0_flag==0)
 80007d2:	e7e7      	b.n	80007a4 <main+0x18>
 80007d4:	20000070 	.word	0x20000070
 80007d8:	08001374 	.word	0x08001374

080007dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db0b      	blt.n	8000806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f003 021f 	and.w	r2, r3, #31
 80007f4:	4906      	ldr	r1, [pc, #24]	@ (8000810 <__NVIC_EnableIRQ+0x34>)
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	e000e100 	.word	0xe000e100

08000814 <SwitchInit>:



#include "switch.h"

void SwitchInit(uint32_t pin) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 800081c:	4b2a      	ldr	r3, [pc, #168]	@ (80008c8 <SwitchInit+0xb4>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000820:	4a29      	ldr	r2, [pc, #164]	@ (80008c8 <SwitchInit+0xb4>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6313      	str	r3, [r2, #48]	@ 0x30

	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000828:	4b28      	ldr	r3, [pc, #160]	@ (80008cc <SwitchInit+0xb8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	3201      	adds	r2, #1
 8000832:	2101      	movs	r1, #1
 8000834:	4091      	lsls	r1, r2
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	0052      	lsls	r2, r2, #1
 800083a:	2001      	movs	r0, #1
 800083c:	fa00 f202 	lsl.w	r2, r0, r2
 8000840:	430a      	orrs	r2, r1
 8000842:	43d2      	mvns	r2, r2
 8000844:	4611      	mov	r1, r2
 8000846:	4a21      	ldr	r2, [pc, #132]	@ (80008cc <SwitchInit+0xb8>)
 8000848:	400b      	ands	r3, r1
 800084a:	6013      	str	r3, [r2, #0]

	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800084c:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <SwitchInit+0xb8>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	0052      	lsls	r2, r2, #1
 8000854:	3201      	adds	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4091      	lsls	r1, r2
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	0052      	lsls	r2, r2, #1
 800085e:	2001      	movs	r0, #1
 8000860:	fa00 f202 	lsl.w	r2, r0, r2
 8000864:	430a      	orrs	r2, r1
 8000866:	43d2      	mvns	r2, r2
 8000868:	4611      	mov	r1, r2
 800086a:	4a18      	ldr	r2, [pc, #96]	@ (80008cc <SwitchInit+0xb8>)
 800086c:	400b      	ands	r3, r1
 800086e:	6093      	str	r3, [r2, #8]

	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000870:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <SwitchInit+0xb8>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	0052      	lsls	r2, r2, #1
 8000878:	3201      	adds	r2, #1
 800087a:	2101      	movs	r1, #1
 800087c:	4091      	lsls	r1, r2
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	0052      	lsls	r2, r2, #1
 8000882:	2001      	movs	r0, #1
 8000884:	fa00 f202 	lsl.w	r2, r0, r2
 8000888:	430a      	orrs	r2, r1
 800088a:	43d2      	mvns	r2, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4a0f      	ldr	r2, [pc, #60]	@ (80008cc <SwitchInit+0xb8>)
 8000890:	400b      	ands	r3, r1
 8000892:	60d3      	str	r3, [r2, #12]

	EXTI->FTSR |= BV(SWITCH);
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <SwitchInit+0xbc>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	4a0d      	ldr	r2, [pc, #52]	@ (80008d0 <SwitchInit+0xbc>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	60d3      	str	r3, [r2, #12]

	EXTI->IMR |= BV(SWITCH);
 80008a0:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <SwitchInit+0xbc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <SwitchInit+0xbc>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6013      	str	r3, [r2, #0]

	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 80008ac:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <SwitchInit+0xc0>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	4a08      	ldr	r2, [pc, #32]	@ (80008d4 <SwitchInit+0xc0>)
 80008b2:	f023 030f 	bic.w	r3, r3, #15
 80008b6:	6093      	str	r3, [r2, #8]

	NVIC_EnableIRQ(EXTI0_IRQn);
 80008b8:	2006      	movs	r0, #6
 80008ba:	f7ff ff8f 	bl	80007dc <__NVIC_EnableIRQ>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40013c00 	.word	0x40013c00
 80008d4:	40013800 	.word	0x40013800

080008d8 <EXTI0_IRQHandler>:


int exti0_flag = 0;


void EXTI0_IRQHandler(void) {
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

	EXTI->PR |= BV(SWITCH);
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <EXTI0_IRQHandler+0x20>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <EXTI0_IRQHandler+0x20>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6153      	str	r3, [r2, #20]

	exti0_flag = 1;
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <EXTI0_IRQHandler+0x24>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40013c00 	.word	0x40013c00
 80008fc:	20000070 	.word	0x20000070

08000900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000908:	4a14      	ldr	r2, [pc, #80]	@ (800095c <_sbrk+0x5c>)
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <_sbrk+0x60>)
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <_sbrk+0x64>)
 800091e:	4a12      	ldr	r2, [pc, #72]	@ (8000968 <_sbrk+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	429a      	cmp	r2, r3
 800092e:	d207      	bcs.n	8000940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000930:	f000 f89c 	bl	8000a6c <__errno>
 8000934:	4603      	mov	r3, r0
 8000936:	220c      	movs	r2, #12
 8000938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800093e:	e009      	b.n	8000954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000940:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000946:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	4a05      	ldr	r2, [pc, #20]	@ (8000964 <_sbrk+0x64>)
 8000950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20020000 	.word	0x20020000
 8000960:	00000400 	.word	0x00000400
 8000964:	20000074 	.word	0x20000074
 8000968:	200001c0 	.word	0x200001c0

0800096c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000970:	f000 f802 	bl	8000978 <DWT_Init>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <DWT_Init+0x58>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	4a13      	ldr	r2, [pc, #76]	@ (80009d0 <DWT_Init+0x58>)
 8000982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000986:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <DWT_Init+0x58>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <DWT_Init+0x58>)
 800098e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000992:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <DWT_Init+0x5c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0e      	ldr	r2, [pc, #56]	@ (80009d4 <DWT_Init+0x5c>)
 800099a:	f023 0301 	bic.w	r3, r3, #1
 800099e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <DWT_Init+0x5c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <DWT_Init+0x5c>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <DWT_Init+0x5c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80009b2:	bf00      	nop
    __ASM volatile ("NOP");
 80009b4:	bf00      	nop
    __ASM volatile ("NOP");
 80009b6:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <DWT_Init+0x5c>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000edf0 	.word	0xe000edf0
 80009d4:	e0001000 	.word	0xe0001000

080009d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d8:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009dc:	f7ff ffc6 	bl	800096c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e2:	490d      	ldr	r1, [pc, #52]	@ (8000a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a1c <LoopForever+0xe>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a24 <LoopForever+0x16>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a06:	f000 f837 	bl	8000a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0a:	f7ff febf 	bl	800078c <main>

08000a0e <LoopForever>:

LoopForever:
  b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   r0, =_estack
 8000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000a1c:	080013c0 	.word	0x080013c0
  ldr r2, =_sbss
 8000a20:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000a24:	200001c0 	.word	0x200001c0

08000a28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <siprintf>:
 8000a2c:	b40e      	push	{r1, r2, r3}
 8000a2e:	b500      	push	{lr}
 8000a30:	b09c      	sub	sp, #112	@ 0x70
 8000a32:	ab1d      	add	r3, sp, #116	@ 0x74
 8000a34:	9002      	str	r0, [sp, #8]
 8000a36:	9006      	str	r0, [sp, #24]
 8000a38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <siprintf+0x38>)
 8000a3e:	9107      	str	r1, [sp, #28]
 8000a40:	9104      	str	r1, [sp, #16]
 8000a42:	4909      	ldr	r1, [pc, #36]	@ (8000a68 <siprintf+0x3c>)
 8000a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a48:	9105      	str	r1, [sp, #20]
 8000a4a:	6800      	ldr	r0, [r0, #0]
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	a902      	add	r1, sp, #8
 8000a50:	f000 f98c 	bl	8000d6c <_svfiprintf_r>
 8000a54:	9b02      	ldr	r3, [sp, #8]
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
 8000a5a:	b01c      	add	sp, #112	@ 0x70
 8000a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a60:	b003      	add	sp, #12
 8000a62:	4770      	bx	lr
 8000a64:	20000004 	.word	0x20000004
 8000a68:	ffff0208 	.word	0xffff0208

08000a6c <__errno>:
 8000a6c:	4b01      	ldr	r3, [pc, #4]	@ (8000a74 <__errno+0x8>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000004 	.word	0x20000004

08000a78 <__libc_init_array>:
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8000ab0 <__libc_init_array+0x38>)
 8000a7c:	4c0d      	ldr	r4, [pc, #52]	@ (8000ab4 <__libc_init_array+0x3c>)
 8000a7e:	1b64      	subs	r4, r4, r5
 8000a80:	10a4      	asrs	r4, r4, #2
 8000a82:	2600      	movs	r6, #0
 8000a84:	42a6      	cmp	r6, r4
 8000a86:	d109      	bne.n	8000a9c <__libc_init_array+0x24>
 8000a88:	4d0b      	ldr	r5, [pc, #44]	@ (8000ab8 <__libc_init_array+0x40>)
 8000a8a:	4c0c      	ldr	r4, [pc, #48]	@ (8000abc <__libc_init_array+0x44>)
 8000a8c:	f000 fc66 	bl	800135c <_init>
 8000a90:	1b64      	subs	r4, r4, r5
 8000a92:	10a4      	asrs	r4, r4, #2
 8000a94:	2600      	movs	r6, #0
 8000a96:	42a6      	cmp	r6, r4
 8000a98:	d105      	bne.n	8000aa6 <__libc_init_array+0x2e>
 8000a9a:	bd70      	pop	{r4, r5, r6, pc}
 8000a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa0:	4798      	blx	r3
 8000aa2:	3601      	adds	r6, #1
 8000aa4:	e7ee      	b.n	8000a84 <__libc_init_array+0xc>
 8000aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aaa:	4798      	blx	r3
 8000aac:	3601      	adds	r6, #1
 8000aae:	e7f2      	b.n	8000a96 <__libc_init_array+0x1e>
 8000ab0:	080013b8 	.word	0x080013b8
 8000ab4:	080013b8 	.word	0x080013b8
 8000ab8:	080013b8 	.word	0x080013b8
 8000abc:	080013bc 	.word	0x080013bc

08000ac0 <__retarget_lock_acquire_recursive>:
 8000ac0:	4770      	bx	lr

08000ac2 <__retarget_lock_release_recursive>:
 8000ac2:	4770      	bx	lr

08000ac4 <_free_r>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	4605      	mov	r5, r0
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	d041      	beq.n	8000b50 <_free_r+0x8c>
 8000acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ad0:	1f0c      	subs	r4, r1, #4
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bfb8      	it	lt
 8000ad6:	18e4      	addlt	r4, r4, r3
 8000ad8:	f000 f8e0 	bl	8000c9c <__malloc_lock>
 8000adc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <_free_r+0x90>)
 8000ade:	6813      	ldr	r3, [r2, #0]
 8000ae0:	b933      	cbnz	r3, 8000af0 <_free_r+0x2c>
 8000ae2:	6063      	str	r3, [r4, #4]
 8000ae4:	6014      	str	r4, [r2, #0]
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000aec:	f000 b8dc 	b.w	8000ca8 <__malloc_unlock>
 8000af0:	42a3      	cmp	r3, r4
 8000af2:	d908      	bls.n	8000b06 <_free_r+0x42>
 8000af4:	6820      	ldr	r0, [r4, #0]
 8000af6:	1821      	adds	r1, r4, r0
 8000af8:	428b      	cmp	r3, r1
 8000afa:	bf01      	itttt	eq
 8000afc:	6819      	ldreq	r1, [r3, #0]
 8000afe:	685b      	ldreq	r3, [r3, #4]
 8000b00:	1809      	addeq	r1, r1, r0
 8000b02:	6021      	streq	r1, [r4, #0]
 8000b04:	e7ed      	b.n	8000ae2 <_free_r+0x1e>
 8000b06:	461a      	mov	r2, r3
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	b10b      	cbz	r3, 8000b10 <_free_r+0x4c>
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d9fa      	bls.n	8000b06 <_free_r+0x42>
 8000b10:	6811      	ldr	r1, [r2, #0]
 8000b12:	1850      	adds	r0, r2, r1
 8000b14:	42a0      	cmp	r0, r4
 8000b16:	d10b      	bne.n	8000b30 <_free_r+0x6c>
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	4401      	add	r1, r0
 8000b1c:	1850      	adds	r0, r2, r1
 8000b1e:	4283      	cmp	r3, r0
 8000b20:	6011      	str	r1, [r2, #0]
 8000b22:	d1e0      	bne.n	8000ae6 <_free_r+0x22>
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	6053      	str	r3, [r2, #4]
 8000b2a:	4408      	add	r0, r1
 8000b2c:	6010      	str	r0, [r2, #0]
 8000b2e:	e7da      	b.n	8000ae6 <_free_r+0x22>
 8000b30:	d902      	bls.n	8000b38 <_free_r+0x74>
 8000b32:	230c      	movs	r3, #12
 8000b34:	602b      	str	r3, [r5, #0]
 8000b36:	e7d6      	b.n	8000ae6 <_free_r+0x22>
 8000b38:	6820      	ldr	r0, [r4, #0]
 8000b3a:	1821      	adds	r1, r4, r0
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	bf04      	itt	eq
 8000b40:	6819      	ldreq	r1, [r3, #0]
 8000b42:	685b      	ldreq	r3, [r3, #4]
 8000b44:	6063      	str	r3, [r4, #4]
 8000b46:	bf04      	itt	eq
 8000b48:	1809      	addeq	r1, r1, r0
 8000b4a:	6021      	streq	r1, [r4, #0]
 8000b4c:	6054      	str	r4, [r2, #4]
 8000b4e:	e7ca      	b.n	8000ae6 <_free_r+0x22>
 8000b50:	bd38      	pop	{r3, r4, r5, pc}
 8000b52:	bf00      	nop
 8000b54:	200001bc 	.word	0x200001bc

08000b58 <sbrk_aligned>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	4e0f      	ldr	r6, [pc, #60]	@ (8000b98 <sbrk_aligned+0x40>)
 8000b5c:	460c      	mov	r4, r1
 8000b5e:	6831      	ldr	r1, [r6, #0]
 8000b60:	4605      	mov	r5, r0
 8000b62:	b911      	cbnz	r1, 8000b6a <sbrk_aligned+0x12>
 8000b64:	f000 fba6 	bl	80012b4 <_sbrk_r>
 8000b68:	6030      	str	r0, [r6, #0]
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	4628      	mov	r0, r5
 8000b6e:	f000 fba1 	bl	80012b4 <_sbrk_r>
 8000b72:	1c43      	adds	r3, r0, #1
 8000b74:	d103      	bne.n	8000b7e <sbrk_aligned+0x26>
 8000b76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
 8000b7e:	1cc4      	adds	r4, r0, #3
 8000b80:	f024 0403 	bic.w	r4, r4, #3
 8000b84:	42a0      	cmp	r0, r4
 8000b86:	d0f8      	beq.n	8000b7a <sbrk_aligned+0x22>
 8000b88:	1a21      	subs	r1, r4, r0
 8000b8a:	4628      	mov	r0, r5
 8000b8c:	f000 fb92 	bl	80012b4 <_sbrk_r>
 8000b90:	3001      	adds	r0, #1
 8000b92:	d1f2      	bne.n	8000b7a <sbrk_aligned+0x22>
 8000b94:	e7ef      	b.n	8000b76 <sbrk_aligned+0x1e>
 8000b96:	bf00      	nop
 8000b98:	200001b8 	.word	0x200001b8

08000b9c <_malloc_r>:
 8000b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ba0:	1ccd      	adds	r5, r1, #3
 8000ba2:	f025 0503 	bic.w	r5, r5, #3
 8000ba6:	3508      	adds	r5, #8
 8000ba8:	2d0c      	cmp	r5, #12
 8000baa:	bf38      	it	cc
 8000bac:	250c      	movcc	r5, #12
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	4606      	mov	r6, r0
 8000bb2:	db01      	blt.n	8000bb8 <_malloc_r+0x1c>
 8000bb4:	42a9      	cmp	r1, r5
 8000bb6:	d904      	bls.n	8000bc2 <_malloc_r+0x26>
 8000bb8:	230c      	movs	r3, #12
 8000bba:	6033      	str	r3, [r6, #0]
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c98 <_malloc_r+0xfc>
 8000bc6:	f000 f869 	bl	8000c9c <__malloc_lock>
 8000bca:	f8d8 3000 	ldr.w	r3, [r8]
 8000bce:	461c      	mov	r4, r3
 8000bd0:	bb44      	cbnz	r4, 8000c24 <_malloc_r+0x88>
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	f7ff ffbf 	bl	8000b58 <sbrk_aligned>
 8000bda:	1c43      	adds	r3, r0, #1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	d158      	bne.n	8000c92 <_malloc_r+0xf6>
 8000be0:	f8d8 4000 	ldr.w	r4, [r8]
 8000be4:	4627      	mov	r7, r4
 8000be6:	2f00      	cmp	r7, #0
 8000be8:	d143      	bne.n	8000c72 <_malloc_r+0xd6>
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d04b      	beq.n	8000c86 <_malloc_r+0xea>
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	4639      	mov	r1, r7
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	eb04 0903 	add.w	r9, r4, r3
 8000bf8:	f000 fb5c 	bl	80012b4 <_sbrk_r>
 8000bfc:	4581      	cmp	r9, r0
 8000bfe:	d142      	bne.n	8000c86 <_malloc_r+0xea>
 8000c00:	6821      	ldr	r1, [r4, #0]
 8000c02:	1a6d      	subs	r5, r5, r1
 8000c04:	4629      	mov	r1, r5
 8000c06:	4630      	mov	r0, r6
 8000c08:	f7ff ffa6 	bl	8000b58 <sbrk_aligned>
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	d03a      	beq.n	8000c86 <_malloc_r+0xea>
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	442b      	add	r3, r5
 8000c14:	6023      	str	r3, [r4, #0]
 8000c16:	f8d8 3000 	ldr.w	r3, [r8]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	bb62      	cbnz	r2, 8000c78 <_malloc_r+0xdc>
 8000c1e:	f8c8 7000 	str.w	r7, [r8]
 8000c22:	e00f      	b.n	8000c44 <_malloc_r+0xa8>
 8000c24:	6822      	ldr	r2, [r4, #0]
 8000c26:	1b52      	subs	r2, r2, r5
 8000c28:	d420      	bmi.n	8000c6c <_malloc_r+0xd0>
 8000c2a:	2a0b      	cmp	r2, #11
 8000c2c:	d917      	bls.n	8000c5e <_malloc_r+0xc2>
 8000c2e:	1961      	adds	r1, r4, r5
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	6025      	str	r5, [r4, #0]
 8000c34:	bf18      	it	ne
 8000c36:	6059      	strne	r1, [r3, #4]
 8000c38:	6863      	ldr	r3, [r4, #4]
 8000c3a:	bf08      	it	eq
 8000c3c:	f8c8 1000 	streq.w	r1, [r8]
 8000c40:	5162      	str	r2, [r4, r5]
 8000c42:	604b      	str	r3, [r1, #4]
 8000c44:	4630      	mov	r0, r6
 8000c46:	f000 f82f 	bl	8000ca8 <__malloc_unlock>
 8000c4a:	f104 000b 	add.w	r0, r4, #11
 8000c4e:	1d23      	adds	r3, r4, #4
 8000c50:	f020 0007 	bic.w	r0, r0, #7
 8000c54:	1ac2      	subs	r2, r0, r3
 8000c56:	bf1c      	itt	ne
 8000c58:	1a1b      	subne	r3, r3, r0
 8000c5a:	50a3      	strne	r3, [r4, r2]
 8000c5c:	e7af      	b.n	8000bbe <_malloc_r+0x22>
 8000c5e:	6862      	ldr	r2, [r4, #4]
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	bf0c      	ite	eq
 8000c64:	f8c8 2000 	streq.w	r2, [r8]
 8000c68:	605a      	strne	r2, [r3, #4]
 8000c6a:	e7eb      	b.n	8000c44 <_malloc_r+0xa8>
 8000c6c:	4623      	mov	r3, r4
 8000c6e:	6864      	ldr	r4, [r4, #4]
 8000c70:	e7ae      	b.n	8000bd0 <_malloc_r+0x34>
 8000c72:	463c      	mov	r4, r7
 8000c74:	687f      	ldr	r7, [r7, #4]
 8000c76:	e7b6      	b.n	8000be6 <_malloc_r+0x4a>
 8000c78:	461a      	mov	r2, r3
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	42a3      	cmp	r3, r4
 8000c7e:	d1fb      	bne.n	8000c78 <_malloc_r+0xdc>
 8000c80:	2300      	movs	r3, #0
 8000c82:	6053      	str	r3, [r2, #4]
 8000c84:	e7de      	b.n	8000c44 <_malloc_r+0xa8>
 8000c86:	230c      	movs	r3, #12
 8000c88:	6033      	str	r3, [r6, #0]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	f000 f80c 	bl	8000ca8 <__malloc_unlock>
 8000c90:	e794      	b.n	8000bbc <_malloc_r+0x20>
 8000c92:	6005      	str	r5, [r0, #0]
 8000c94:	e7d6      	b.n	8000c44 <_malloc_r+0xa8>
 8000c96:	bf00      	nop
 8000c98:	200001bc 	.word	0x200001bc

08000c9c <__malloc_lock>:
 8000c9c:	4801      	ldr	r0, [pc, #4]	@ (8000ca4 <__malloc_lock+0x8>)
 8000c9e:	f7ff bf0f 	b.w	8000ac0 <__retarget_lock_acquire_recursive>
 8000ca2:	bf00      	nop
 8000ca4:	200001b4 	.word	0x200001b4

08000ca8 <__malloc_unlock>:
 8000ca8:	4801      	ldr	r0, [pc, #4]	@ (8000cb0 <__malloc_unlock+0x8>)
 8000caa:	f7ff bf0a 	b.w	8000ac2 <__retarget_lock_release_recursive>
 8000cae:	bf00      	nop
 8000cb0:	200001b4 	.word	0x200001b4

08000cb4 <__ssputs_r>:
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	688e      	ldr	r6, [r1, #8]
 8000cba:	461f      	mov	r7, r3
 8000cbc:	42be      	cmp	r6, r7
 8000cbe:	680b      	ldr	r3, [r1, #0]
 8000cc0:	4682      	mov	sl, r0
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	4690      	mov	r8, r2
 8000cc6:	d82d      	bhi.n	8000d24 <__ssputs_r+0x70>
 8000cc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ccc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000cd0:	d026      	beq.n	8000d20 <__ssputs_r+0x6c>
 8000cd2:	6965      	ldr	r5, [r4, #20]
 8000cd4:	6909      	ldr	r1, [r1, #16]
 8000cd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000cda:	eba3 0901 	sub.w	r9, r3, r1
 8000cde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ce2:	1c7b      	adds	r3, r7, #1
 8000ce4:	444b      	add	r3, r9
 8000ce6:	106d      	asrs	r5, r5, #1
 8000ce8:	429d      	cmp	r5, r3
 8000cea:	bf38      	it	cc
 8000cec:	461d      	movcc	r5, r3
 8000cee:	0553      	lsls	r3, r2, #21
 8000cf0:	d527      	bpl.n	8000d42 <__ssputs_r+0x8e>
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	f7ff ff52 	bl	8000b9c <_malloc_r>
 8000cf8:	4606      	mov	r6, r0
 8000cfa:	b360      	cbz	r0, 8000d56 <__ssputs_r+0xa2>
 8000cfc:	6921      	ldr	r1, [r4, #16]
 8000cfe:	464a      	mov	r2, r9
 8000d00:	f000 fae8 	bl	80012d4 <memcpy>
 8000d04:	89a3      	ldrh	r3, [r4, #12]
 8000d06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0e:	81a3      	strh	r3, [r4, #12]
 8000d10:	6126      	str	r6, [r4, #16]
 8000d12:	6165      	str	r5, [r4, #20]
 8000d14:	444e      	add	r6, r9
 8000d16:	eba5 0509 	sub.w	r5, r5, r9
 8000d1a:	6026      	str	r6, [r4, #0]
 8000d1c:	60a5      	str	r5, [r4, #8]
 8000d1e:	463e      	mov	r6, r7
 8000d20:	42be      	cmp	r6, r7
 8000d22:	d900      	bls.n	8000d26 <__ssputs_r+0x72>
 8000d24:	463e      	mov	r6, r7
 8000d26:	6820      	ldr	r0, [r4, #0]
 8000d28:	4632      	mov	r2, r6
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	f000 faa8 	bl	8001280 <memmove>
 8000d30:	68a3      	ldr	r3, [r4, #8]
 8000d32:	1b9b      	subs	r3, r3, r6
 8000d34:	60a3      	str	r3, [r4, #8]
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	4433      	add	r3, r6
 8000d3a:	6023      	str	r3, [r4, #0]
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	462a      	mov	r2, r5
 8000d44:	f000 fad4 	bl	80012f0 <_realloc_r>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d1e0      	bne.n	8000d10 <__ssputs_r+0x5c>
 8000d4e:	6921      	ldr	r1, [r4, #16]
 8000d50:	4650      	mov	r0, sl
 8000d52:	f7ff feb7 	bl	8000ac4 <_free_r>
 8000d56:	230c      	movs	r3, #12
 8000d58:	f8ca 3000 	str.w	r3, [sl]
 8000d5c:	89a3      	ldrh	r3, [r4, #12]
 8000d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d62:	81a3      	strh	r3, [r4, #12]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d68:	e7e9      	b.n	8000d3e <__ssputs_r+0x8a>
	...

08000d6c <_svfiprintf_r>:
 8000d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d70:	4698      	mov	r8, r3
 8000d72:	898b      	ldrh	r3, [r1, #12]
 8000d74:	061b      	lsls	r3, r3, #24
 8000d76:	b09d      	sub	sp, #116	@ 0x74
 8000d78:	4607      	mov	r7, r0
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4614      	mov	r4, r2
 8000d7e:	d510      	bpl.n	8000da2 <_svfiprintf_r+0x36>
 8000d80:	690b      	ldr	r3, [r1, #16]
 8000d82:	b973      	cbnz	r3, 8000da2 <_svfiprintf_r+0x36>
 8000d84:	2140      	movs	r1, #64	@ 0x40
 8000d86:	f7ff ff09 	bl	8000b9c <_malloc_r>
 8000d8a:	6028      	str	r0, [r5, #0]
 8000d8c:	6128      	str	r0, [r5, #16]
 8000d8e:	b930      	cbnz	r0, 8000d9e <_svfiprintf_r+0x32>
 8000d90:	230c      	movs	r3, #12
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d98:	b01d      	add	sp, #116	@ 0x74
 8000d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d9e:	2340      	movs	r3, #64	@ 0x40
 8000da0:	616b      	str	r3, [r5, #20]
 8000da2:	2300      	movs	r3, #0
 8000da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000da6:	2320      	movs	r3, #32
 8000da8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8000db0:	2330      	movs	r3, #48	@ 0x30
 8000db2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000f50 <_svfiprintf_r+0x1e4>
 8000db6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000dba:	f04f 0901 	mov.w	r9, #1
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dc6:	b10a      	cbz	r2, 8000dcc <_svfiprintf_r+0x60>
 8000dc8:	2a25      	cmp	r2, #37	@ 0x25
 8000dca:	d1f9      	bne.n	8000dc0 <_svfiprintf_r+0x54>
 8000dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8000dd0:	d00b      	beq.n	8000dea <_svfiprintf_r+0x7e>
 8000dd2:	465b      	mov	r3, fp
 8000dd4:	4622      	mov	r2, r4
 8000dd6:	4629      	mov	r1, r5
 8000dd8:	4638      	mov	r0, r7
 8000dda:	f7ff ff6b 	bl	8000cb4 <__ssputs_r>
 8000dde:	3001      	adds	r0, #1
 8000de0:	f000 80a7 	beq.w	8000f32 <_svfiprintf_r+0x1c6>
 8000de4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000de6:	445a      	add	r2, fp
 8000de8:	9209      	str	r2, [sp, #36]	@ 0x24
 8000dea:	f89a 3000 	ldrb.w	r3, [sl]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 809f 	beq.w	8000f32 <_svfiprintf_r+0x1c6>
 8000df4:	2300      	movs	r3, #0
 8000df6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dfe:	f10a 0a01 	add.w	sl, sl, #1
 8000e02:	9304      	str	r3, [sp, #16]
 8000e04:	9307      	str	r3, [sp, #28]
 8000e06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e0c:	4654      	mov	r4, sl
 8000e0e:	2205      	movs	r2, #5
 8000e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e14:	484e      	ldr	r0, [pc, #312]	@ (8000f50 <_svfiprintf_r+0x1e4>)
 8000e16:	f7ff f9db 	bl	80001d0 <memchr>
 8000e1a:	9a04      	ldr	r2, [sp, #16]
 8000e1c:	b9d8      	cbnz	r0, 8000e56 <_svfiprintf_r+0xea>
 8000e1e:	06d0      	lsls	r0, r2, #27
 8000e20:	bf44      	itt	mi
 8000e22:	2320      	movmi	r3, #32
 8000e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e28:	0711      	lsls	r1, r2, #28
 8000e2a:	bf44      	itt	mi
 8000e2c:	232b      	movmi	r3, #43	@ 0x2b
 8000e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e32:	f89a 3000 	ldrb.w	r3, [sl]
 8000e36:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e38:	d015      	beq.n	8000e66 <_svfiprintf_r+0xfa>
 8000e3a:	9a07      	ldr	r2, [sp, #28]
 8000e3c:	4654      	mov	r4, sl
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f04f 0c0a 	mov.w	ip, #10
 8000e44:	4621      	mov	r1, r4
 8000e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4a:	3b30      	subs	r3, #48	@ 0x30
 8000e4c:	2b09      	cmp	r3, #9
 8000e4e:	d94b      	bls.n	8000ee8 <_svfiprintf_r+0x17c>
 8000e50:	b1b0      	cbz	r0, 8000e80 <_svfiprintf_r+0x114>
 8000e52:	9207      	str	r2, [sp, #28]
 8000e54:	e014      	b.n	8000e80 <_svfiprintf_r+0x114>
 8000e56:	eba0 0308 	sub.w	r3, r0, r8
 8000e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	9304      	str	r3, [sp, #16]
 8000e62:	46a2      	mov	sl, r4
 8000e64:	e7d2      	b.n	8000e0c <_svfiprintf_r+0xa0>
 8000e66:	9b03      	ldr	r3, [sp, #12]
 8000e68:	1d19      	adds	r1, r3, #4
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	9103      	str	r1, [sp, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bfbb      	ittet	lt
 8000e72:	425b      	neglt	r3, r3
 8000e74:	f042 0202 	orrlt.w	r2, r2, #2
 8000e78:	9307      	strge	r3, [sp, #28]
 8000e7a:	9307      	strlt	r3, [sp, #28]
 8000e7c:	bfb8      	it	lt
 8000e7e:	9204      	strlt	r2, [sp, #16]
 8000e80:	7823      	ldrb	r3, [r4, #0]
 8000e82:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e84:	d10a      	bne.n	8000e9c <_svfiprintf_r+0x130>
 8000e86:	7863      	ldrb	r3, [r4, #1]
 8000e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e8a:	d132      	bne.n	8000ef2 <_svfiprintf_r+0x186>
 8000e8c:	9b03      	ldr	r3, [sp, #12]
 8000e8e:	1d1a      	adds	r2, r3, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	9203      	str	r2, [sp, #12]
 8000e94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e98:	3402      	adds	r4, #2
 8000e9a:	9305      	str	r3, [sp, #20]
 8000e9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000f54 <_svfiprintf_r+0x1e8>
 8000ea0:	7821      	ldrb	r1, [r4, #0]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	4650      	mov	r0, sl
 8000ea6:	f7ff f993 	bl	80001d0 <memchr>
 8000eaa:	b138      	cbz	r0, 8000ebc <_svfiprintf_r+0x150>
 8000eac:	9b04      	ldr	r3, [sp, #16]
 8000eae:	eba0 000a 	sub.w	r0, r0, sl
 8000eb2:	2240      	movs	r2, #64	@ 0x40
 8000eb4:	4082      	lsls	r2, r0
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	3401      	adds	r4, #1
 8000eba:	9304      	str	r3, [sp, #16]
 8000ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ec0:	4825      	ldr	r0, [pc, #148]	@ (8000f58 <_svfiprintf_r+0x1ec>)
 8000ec2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ec6:	2206      	movs	r2, #6
 8000ec8:	f7ff f982 	bl	80001d0 <memchr>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d036      	beq.n	8000f3e <_svfiprintf_r+0x1d2>
 8000ed0:	4b22      	ldr	r3, [pc, #136]	@ (8000f5c <_svfiprintf_r+0x1f0>)
 8000ed2:	bb1b      	cbnz	r3, 8000f1c <_svfiprintf_r+0x1b0>
 8000ed4:	9b03      	ldr	r3, [sp, #12]
 8000ed6:	3307      	adds	r3, #7
 8000ed8:	f023 0307 	bic.w	r3, r3, #7
 8000edc:	3308      	adds	r3, #8
 8000ede:	9303      	str	r3, [sp, #12]
 8000ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ee2:	4433      	add	r3, r6
 8000ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ee6:	e76a      	b.n	8000dbe <_svfiprintf_r+0x52>
 8000ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000eec:	460c      	mov	r4, r1
 8000eee:	2001      	movs	r0, #1
 8000ef0:	e7a8      	b.n	8000e44 <_svfiprintf_r+0xd8>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	3401      	adds	r4, #1
 8000ef6:	9305      	str	r3, [sp, #20]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 0c0a 	mov.w	ip, #10
 8000efe:	4620      	mov	r0, r4
 8000f00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f04:	3a30      	subs	r2, #48	@ 0x30
 8000f06:	2a09      	cmp	r2, #9
 8000f08:	d903      	bls.n	8000f12 <_svfiprintf_r+0x1a6>
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0c6      	beq.n	8000e9c <_svfiprintf_r+0x130>
 8000f0e:	9105      	str	r1, [sp, #20]
 8000f10:	e7c4      	b.n	8000e9c <_svfiprintf_r+0x130>
 8000f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f16:	4604      	mov	r4, r0
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e7f0      	b.n	8000efe <_svfiprintf_r+0x192>
 8000f1c:	ab03      	add	r3, sp, #12
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	462a      	mov	r2, r5
 8000f22:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <_svfiprintf_r+0x1f4>)
 8000f24:	a904      	add	r1, sp, #16
 8000f26:	4638      	mov	r0, r7
 8000f28:	f3af 8000 	nop.w
 8000f2c:	1c42      	adds	r2, r0, #1
 8000f2e:	4606      	mov	r6, r0
 8000f30:	d1d6      	bne.n	8000ee0 <_svfiprintf_r+0x174>
 8000f32:	89ab      	ldrh	r3, [r5, #12]
 8000f34:	065b      	lsls	r3, r3, #25
 8000f36:	f53f af2d 	bmi.w	8000d94 <_svfiprintf_r+0x28>
 8000f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f3c:	e72c      	b.n	8000d98 <_svfiprintf_r+0x2c>
 8000f3e:	ab03      	add	r3, sp, #12
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	462a      	mov	r2, r5
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <_svfiprintf_r+0x1f4>)
 8000f46:	a904      	add	r1, sp, #16
 8000f48:	4638      	mov	r0, r7
 8000f4a:	f000 f879 	bl	8001040 <_printf_i>
 8000f4e:	e7ed      	b.n	8000f2c <_svfiprintf_r+0x1c0>
 8000f50:	0800137b 	.word	0x0800137b
 8000f54:	08001381 	.word	0x08001381
 8000f58:	08001385 	.word	0x08001385
 8000f5c:	00000000 	.word	0x00000000
 8000f60:	08000cb5 	.word	0x08000cb5

08000f64 <_printf_common>:
 8000f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f68:	4616      	mov	r6, r2
 8000f6a:	4698      	mov	r8, r3
 8000f6c:	688a      	ldr	r2, [r1, #8]
 8000f6e:	690b      	ldr	r3, [r1, #16]
 8000f70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f74:	4293      	cmp	r3, r2
 8000f76:	bfb8      	it	lt
 8000f78:	4613      	movlt	r3, r2
 8000f7a:	6033      	str	r3, [r6, #0]
 8000f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f80:	4607      	mov	r7, r0
 8000f82:	460c      	mov	r4, r1
 8000f84:	b10a      	cbz	r2, 8000f8a <_printf_common+0x26>
 8000f86:	3301      	adds	r3, #1
 8000f88:	6033      	str	r3, [r6, #0]
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	0699      	lsls	r1, r3, #26
 8000f8e:	bf42      	ittt	mi
 8000f90:	6833      	ldrmi	r3, [r6, #0]
 8000f92:	3302      	addmi	r3, #2
 8000f94:	6033      	strmi	r3, [r6, #0]
 8000f96:	6825      	ldr	r5, [r4, #0]
 8000f98:	f015 0506 	ands.w	r5, r5, #6
 8000f9c:	d106      	bne.n	8000fac <_printf_common+0x48>
 8000f9e:	f104 0a19 	add.w	sl, r4, #25
 8000fa2:	68e3      	ldr	r3, [r4, #12]
 8000fa4:	6832      	ldr	r2, [r6, #0]
 8000fa6:	1a9b      	subs	r3, r3, r2
 8000fa8:	42ab      	cmp	r3, r5
 8000faa:	dc26      	bgt.n	8000ffa <_printf_common+0x96>
 8000fac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000fb0:	6822      	ldr	r2, [r4, #0]
 8000fb2:	3b00      	subs	r3, #0
 8000fb4:	bf18      	it	ne
 8000fb6:	2301      	movne	r3, #1
 8000fb8:	0692      	lsls	r2, r2, #26
 8000fba:	d42b      	bmi.n	8001014 <_printf_common+0xb0>
 8000fbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000fc0:	4641      	mov	r1, r8
 8000fc2:	4638      	mov	r0, r7
 8000fc4:	47c8      	blx	r9
 8000fc6:	3001      	adds	r0, #1
 8000fc8:	d01e      	beq.n	8001008 <_printf_common+0xa4>
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	6922      	ldr	r2, [r4, #16]
 8000fce:	f003 0306 	and.w	r3, r3, #6
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf02      	ittt	eq
 8000fd6:	68e5      	ldreq	r5, [r4, #12]
 8000fd8:	6833      	ldreq	r3, [r6, #0]
 8000fda:	1aed      	subeq	r5, r5, r3
 8000fdc:	68a3      	ldr	r3, [r4, #8]
 8000fde:	bf0c      	ite	eq
 8000fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fe4:	2500      	movne	r5, #0
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	bfc4      	itt	gt
 8000fea:	1a9b      	subgt	r3, r3, r2
 8000fec:	18ed      	addgt	r5, r5, r3
 8000fee:	2600      	movs	r6, #0
 8000ff0:	341a      	adds	r4, #26
 8000ff2:	42b5      	cmp	r5, r6
 8000ff4:	d11a      	bne.n	800102c <_printf_common+0xc8>
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	e008      	b.n	800100c <_printf_common+0xa8>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	4652      	mov	r2, sl
 8000ffe:	4641      	mov	r1, r8
 8001000:	4638      	mov	r0, r7
 8001002:	47c8      	blx	r9
 8001004:	3001      	adds	r0, #1
 8001006:	d103      	bne.n	8001010 <_printf_common+0xac>
 8001008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800100c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001010:	3501      	adds	r5, #1
 8001012:	e7c6      	b.n	8000fa2 <_printf_common+0x3e>
 8001014:	18e1      	adds	r1, r4, r3
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	2030      	movs	r0, #48	@ 0x30
 800101a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800101e:	4422      	add	r2, r4
 8001020:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001024:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001028:	3302      	adds	r3, #2
 800102a:	e7c7      	b.n	8000fbc <_printf_common+0x58>
 800102c:	2301      	movs	r3, #1
 800102e:	4622      	mov	r2, r4
 8001030:	4641      	mov	r1, r8
 8001032:	4638      	mov	r0, r7
 8001034:	47c8      	blx	r9
 8001036:	3001      	adds	r0, #1
 8001038:	d0e6      	beq.n	8001008 <_printf_common+0xa4>
 800103a:	3601      	adds	r6, #1
 800103c:	e7d9      	b.n	8000ff2 <_printf_common+0x8e>
	...

08001040 <_printf_i>:
 8001040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001044:	7e0f      	ldrb	r7, [r1, #24]
 8001046:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001048:	2f78      	cmp	r7, #120	@ 0x78
 800104a:	4691      	mov	r9, r2
 800104c:	4680      	mov	r8, r0
 800104e:	460c      	mov	r4, r1
 8001050:	469a      	mov	sl, r3
 8001052:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001056:	d807      	bhi.n	8001068 <_printf_i+0x28>
 8001058:	2f62      	cmp	r7, #98	@ 0x62
 800105a:	d80a      	bhi.n	8001072 <_printf_i+0x32>
 800105c:	2f00      	cmp	r7, #0
 800105e:	f000 80d2 	beq.w	8001206 <_printf_i+0x1c6>
 8001062:	2f58      	cmp	r7, #88	@ 0x58
 8001064:	f000 80b9 	beq.w	80011da <_printf_i+0x19a>
 8001068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800106c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001070:	e03a      	b.n	80010e8 <_printf_i+0xa8>
 8001072:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001076:	2b15      	cmp	r3, #21
 8001078:	d8f6      	bhi.n	8001068 <_printf_i+0x28>
 800107a:	a101      	add	r1, pc, #4	@ (adr r1, 8001080 <_printf_i+0x40>)
 800107c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001080:	080010d9 	.word	0x080010d9
 8001084:	080010ed 	.word	0x080010ed
 8001088:	08001069 	.word	0x08001069
 800108c:	08001069 	.word	0x08001069
 8001090:	08001069 	.word	0x08001069
 8001094:	08001069 	.word	0x08001069
 8001098:	080010ed 	.word	0x080010ed
 800109c:	08001069 	.word	0x08001069
 80010a0:	08001069 	.word	0x08001069
 80010a4:	08001069 	.word	0x08001069
 80010a8:	08001069 	.word	0x08001069
 80010ac:	080011ed 	.word	0x080011ed
 80010b0:	08001117 	.word	0x08001117
 80010b4:	080011a7 	.word	0x080011a7
 80010b8:	08001069 	.word	0x08001069
 80010bc:	08001069 	.word	0x08001069
 80010c0:	0800120f 	.word	0x0800120f
 80010c4:	08001069 	.word	0x08001069
 80010c8:	08001117 	.word	0x08001117
 80010cc:	08001069 	.word	0x08001069
 80010d0:	08001069 	.word	0x08001069
 80010d4:	080011af 	.word	0x080011af
 80010d8:	6833      	ldr	r3, [r6, #0]
 80010da:	1d1a      	adds	r2, r3, #4
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6032      	str	r2, [r6, #0]
 80010e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010e8:	2301      	movs	r3, #1
 80010ea:	e09d      	b.n	8001228 <_printf_i+0x1e8>
 80010ec:	6833      	ldr	r3, [r6, #0]
 80010ee:	6820      	ldr	r0, [r4, #0]
 80010f0:	1d19      	adds	r1, r3, #4
 80010f2:	6031      	str	r1, [r6, #0]
 80010f4:	0606      	lsls	r6, r0, #24
 80010f6:	d501      	bpl.n	80010fc <_printf_i+0xbc>
 80010f8:	681d      	ldr	r5, [r3, #0]
 80010fa:	e003      	b.n	8001104 <_printf_i+0xc4>
 80010fc:	0645      	lsls	r5, r0, #25
 80010fe:	d5fb      	bpl.n	80010f8 <_printf_i+0xb8>
 8001100:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001104:	2d00      	cmp	r5, #0
 8001106:	da03      	bge.n	8001110 <_printf_i+0xd0>
 8001108:	232d      	movs	r3, #45	@ 0x2d
 800110a:	426d      	negs	r5, r5
 800110c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001110:	4859      	ldr	r0, [pc, #356]	@ (8001278 <_printf_i+0x238>)
 8001112:	230a      	movs	r3, #10
 8001114:	e011      	b.n	800113a <_printf_i+0xfa>
 8001116:	6821      	ldr	r1, [r4, #0]
 8001118:	6833      	ldr	r3, [r6, #0]
 800111a:	0608      	lsls	r0, r1, #24
 800111c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001120:	d402      	bmi.n	8001128 <_printf_i+0xe8>
 8001122:	0649      	lsls	r1, r1, #25
 8001124:	bf48      	it	mi
 8001126:	b2ad      	uxthmi	r5, r5
 8001128:	2f6f      	cmp	r7, #111	@ 0x6f
 800112a:	4853      	ldr	r0, [pc, #332]	@ (8001278 <_printf_i+0x238>)
 800112c:	6033      	str	r3, [r6, #0]
 800112e:	bf14      	ite	ne
 8001130:	230a      	movne	r3, #10
 8001132:	2308      	moveq	r3, #8
 8001134:	2100      	movs	r1, #0
 8001136:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800113a:	6866      	ldr	r6, [r4, #4]
 800113c:	60a6      	str	r6, [r4, #8]
 800113e:	2e00      	cmp	r6, #0
 8001140:	bfa2      	ittt	ge
 8001142:	6821      	ldrge	r1, [r4, #0]
 8001144:	f021 0104 	bicge.w	r1, r1, #4
 8001148:	6021      	strge	r1, [r4, #0]
 800114a:	b90d      	cbnz	r5, 8001150 <_printf_i+0x110>
 800114c:	2e00      	cmp	r6, #0
 800114e:	d04b      	beq.n	80011e8 <_printf_i+0x1a8>
 8001150:	4616      	mov	r6, r2
 8001152:	fbb5 f1f3 	udiv	r1, r5, r3
 8001156:	fb03 5711 	mls	r7, r3, r1, r5
 800115a:	5dc7      	ldrb	r7, [r0, r7]
 800115c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001160:	462f      	mov	r7, r5
 8001162:	42bb      	cmp	r3, r7
 8001164:	460d      	mov	r5, r1
 8001166:	d9f4      	bls.n	8001152 <_printf_i+0x112>
 8001168:	2b08      	cmp	r3, #8
 800116a:	d10b      	bne.n	8001184 <_printf_i+0x144>
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	07df      	lsls	r7, r3, #31
 8001170:	d508      	bpl.n	8001184 <_printf_i+0x144>
 8001172:	6923      	ldr	r3, [r4, #16]
 8001174:	6861      	ldr	r1, [r4, #4]
 8001176:	4299      	cmp	r1, r3
 8001178:	bfde      	ittt	le
 800117a:	2330      	movle	r3, #48	@ 0x30
 800117c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001180:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001184:	1b92      	subs	r2, r2, r6
 8001186:	6122      	str	r2, [r4, #16]
 8001188:	f8cd a000 	str.w	sl, [sp]
 800118c:	464b      	mov	r3, r9
 800118e:	aa03      	add	r2, sp, #12
 8001190:	4621      	mov	r1, r4
 8001192:	4640      	mov	r0, r8
 8001194:	f7ff fee6 	bl	8000f64 <_printf_common>
 8001198:	3001      	adds	r0, #1
 800119a:	d14a      	bne.n	8001232 <_printf_i+0x1f2>
 800119c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011a0:	b004      	add	sp, #16
 80011a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	f043 0320 	orr.w	r3, r3, #32
 80011ac:	6023      	str	r3, [r4, #0]
 80011ae:	4833      	ldr	r0, [pc, #204]	@ (800127c <_printf_i+0x23c>)
 80011b0:	2778      	movs	r7, #120	@ 0x78
 80011b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	6831      	ldr	r1, [r6, #0]
 80011ba:	061f      	lsls	r7, r3, #24
 80011bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80011c0:	d402      	bmi.n	80011c8 <_printf_i+0x188>
 80011c2:	065f      	lsls	r7, r3, #25
 80011c4:	bf48      	it	mi
 80011c6:	b2ad      	uxthmi	r5, r5
 80011c8:	6031      	str	r1, [r6, #0]
 80011ca:	07d9      	lsls	r1, r3, #31
 80011cc:	bf44      	itt	mi
 80011ce:	f043 0320 	orrmi.w	r3, r3, #32
 80011d2:	6023      	strmi	r3, [r4, #0]
 80011d4:	b11d      	cbz	r5, 80011de <_printf_i+0x19e>
 80011d6:	2310      	movs	r3, #16
 80011d8:	e7ac      	b.n	8001134 <_printf_i+0xf4>
 80011da:	4827      	ldr	r0, [pc, #156]	@ (8001278 <_printf_i+0x238>)
 80011dc:	e7e9      	b.n	80011b2 <_printf_i+0x172>
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	f023 0320 	bic.w	r3, r3, #32
 80011e4:	6023      	str	r3, [r4, #0]
 80011e6:	e7f6      	b.n	80011d6 <_printf_i+0x196>
 80011e8:	4616      	mov	r6, r2
 80011ea:	e7bd      	b.n	8001168 <_printf_i+0x128>
 80011ec:	6833      	ldr	r3, [r6, #0]
 80011ee:	6825      	ldr	r5, [r4, #0]
 80011f0:	6961      	ldr	r1, [r4, #20]
 80011f2:	1d18      	adds	r0, r3, #4
 80011f4:	6030      	str	r0, [r6, #0]
 80011f6:	062e      	lsls	r6, r5, #24
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	d501      	bpl.n	8001200 <_printf_i+0x1c0>
 80011fc:	6019      	str	r1, [r3, #0]
 80011fe:	e002      	b.n	8001206 <_printf_i+0x1c6>
 8001200:	0668      	lsls	r0, r5, #25
 8001202:	d5fb      	bpl.n	80011fc <_printf_i+0x1bc>
 8001204:	8019      	strh	r1, [r3, #0]
 8001206:	2300      	movs	r3, #0
 8001208:	6123      	str	r3, [r4, #16]
 800120a:	4616      	mov	r6, r2
 800120c:	e7bc      	b.n	8001188 <_printf_i+0x148>
 800120e:	6833      	ldr	r3, [r6, #0]
 8001210:	1d1a      	adds	r2, r3, #4
 8001212:	6032      	str	r2, [r6, #0]
 8001214:	681e      	ldr	r6, [r3, #0]
 8001216:	6862      	ldr	r2, [r4, #4]
 8001218:	2100      	movs	r1, #0
 800121a:	4630      	mov	r0, r6
 800121c:	f7fe ffd8 	bl	80001d0 <memchr>
 8001220:	b108      	cbz	r0, 8001226 <_printf_i+0x1e6>
 8001222:	1b80      	subs	r0, r0, r6
 8001224:	6060      	str	r0, [r4, #4]
 8001226:	6863      	ldr	r3, [r4, #4]
 8001228:	6123      	str	r3, [r4, #16]
 800122a:	2300      	movs	r3, #0
 800122c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001230:	e7aa      	b.n	8001188 <_printf_i+0x148>
 8001232:	6923      	ldr	r3, [r4, #16]
 8001234:	4632      	mov	r2, r6
 8001236:	4649      	mov	r1, r9
 8001238:	4640      	mov	r0, r8
 800123a:	47d0      	blx	sl
 800123c:	3001      	adds	r0, #1
 800123e:	d0ad      	beq.n	800119c <_printf_i+0x15c>
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	079b      	lsls	r3, r3, #30
 8001244:	d413      	bmi.n	800126e <_printf_i+0x22e>
 8001246:	68e0      	ldr	r0, [r4, #12]
 8001248:	9b03      	ldr	r3, [sp, #12]
 800124a:	4298      	cmp	r0, r3
 800124c:	bfb8      	it	lt
 800124e:	4618      	movlt	r0, r3
 8001250:	e7a6      	b.n	80011a0 <_printf_i+0x160>
 8001252:	2301      	movs	r3, #1
 8001254:	4632      	mov	r2, r6
 8001256:	4649      	mov	r1, r9
 8001258:	4640      	mov	r0, r8
 800125a:	47d0      	blx	sl
 800125c:	3001      	adds	r0, #1
 800125e:	d09d      	beq.n	800119c <_printf_i+0x15c>
 8001260:	3501      	adds	r5, #1
 8001262:	68e3      	ldr	r3, [r4, #12]
 8001264:	9903      	ldr	r1, [sp, #12]
 8001266:	1a5b      	subs	r3, r3, r1
 8001268:	42ab      	cmp	r3, r5
 800126a:	dcf2      	bgt.n	8001252 <_printf_i+0x212>
 800126c:	e7eb      	b.n	8001246 <_printf_i+0x206>
 800126e:	2500      	movs	r5, #0
 8001270:	f104 0619 	add.w	r6, r4, #25
 8001274:	e7f5      	b.n	8001262 <_printf_i+0x222>
 8001276:	bf00      	nop
 8001278:	0800138c 	.word	0x0800138c
 800127c:	0800139d 	.word	0x0800139d

08001280 <memmove>:
 8001280:	4288      	cmp	r0, r1
 8001282:	b510      	push	{r4, lr}
 8001284:	eb01 0402 	add.w	r4, r1, r2
 8001288:	d902      	bls.n	8001290 <memmove+0x10>
 800128a:	4284      	cmp	r4, r0
 800128c:	4623      	mov	r3, r4
 800128e:	d807      	bhi.n	80012a0 <memmove+0x20>
 8001290:	1e43      	subs	r3, r0, #1
 8001292:	42a1      	cmp	r1, r4
 8001294:	d008      	beq.n	80012a8 <memmove+0x28>
 8001296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800129a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800129e:	e7f8      	b.n	8001292 <memmove+0x12>
 80012a0:	4402      	add	r2, r0
 80012a2:	4601      	mov	r1, r0
 80012a4:	428a      	cmp	r2, r1
 80012a6:	d100      	bne.n	80012aa <memmove+0x2a>
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80012ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80012b2:	e7f7      	b.n	80012a4 <memmove+0x24>

080012b4 <_sbrk_r>:
 80012b4:	b538      	push	{r3, r4, r5, lr}
 80012b6:	4d06      	ldr	r5, [pc, #24]	@ (80012d0 <_sbrk_r+0x1c>)
 80012b8:	2300      	movs	r3, #0
 80012ba:	4604      	mov	r4, r0
 80012bc:	4608      	mov	r0, r1
 80012be:	602b      	str	r3, [r5, #0]
 80012c0:	f7ff fb1e 	bl	8000900 <_sbrk>
 80012c4:	1c43      	adds	r3, r0, #1
 80012c6:	d102      	bne.n	80012ce <_sbrk_r+0x1a>
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	b103      	cbz	r3, 80012ce <_sbrk_r+0x1a>
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	bd38      	pop	{r3, r4, r5, pc}
 80012d0:	200001b0 	.word	0x200001b0

080012d4 <memcpy>:
 80012d4:	440a      	add	r2, r1
 80012d6:	4291      	cmp	r1, r2
 80012d8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80012dc:	d100      	bne.n	80012e0 <memcpy+0xc>
 80012de:	4770      	bx	lr
 80012e0:	b510      	push	{r4, lr}
 80012e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80012e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80012ea:	4291      	cmp	r1, r2
 80012ec:	d1f9      	bne.n	80012e2 <memcpy+0xe>
 80012ee:	bd10      	pop	{r4, pc}

080012f0 <_realloc_r>:
 80012f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f4:	4680      	mov	r8, r0
 80012f6:	4615      	mov	r5, r2
 80012f8:	460c      	mov	r4, r1
 80012fa:	b921      	cbnz	r1, 8001306 <_realloc_r+0x16>
 80012fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001300:	4611      	mov	r1, r2
 8001302:	f7ff bc4b 	b.w	8000b9c <_malloc_r>
 8001306:	b92a      	cbnz	r2, 8001314 <_realloc_r+0x24>
 8001308:	f7ff fbdc 	bl	8000ac4 <_free_r>
 800130c:	2400      	movs	r4, #0
 800130e:	4620      	mov	r0, r4
 8001310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001314:	f000 f81a 	bl	800134c <_malloc_usable_size_r>
 8001318:	4285      	cmp	r5, r0
 800131a:	4606      	mov	r6, r0
 800131c:	d802      	bhi.n	8001324 <_realloc_r+0x34>
 800131e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001322:	d8f4      	bhi.n	800130e <_realloc_r+0x1e>
 8001324:	4629      	mov	r1, r5
 8001326:	4640      	mov	r0, r8
 8001328:	f7ff fc38 	bl	8000b9c <_malloc_r>
 800132c:	4607      	mov	r7, r0
 800132e:	2800      	cmp	r0, #0
 8001330:	d0ec      	beq.n	800130c <_realloc_r+0x1c>
 8001332:	42b5      	cmp	r5, r6
 8001334:	462a      	mov	r2, r5
 8001336:	4621      	mov	r1, r4
 8001338:	bf28      	it	cs
 800133a:	4632      	movcs	r2, r6
 800133c:	f7ff ffca 	bl	80012d4 <memcpy>
 8001340:	4621      	mov	r1, r4
 8001342:	4640      	mov	r0, r8
 8001344:	f7ff fbbe 	bl	8000ac4 <_free_r>
 8001348:	463c      	mov	r4, r7
 800134a:	e7e0      	b.n	800130e <_realloc_r+0x1e>

0800134c <_malloc_usable_size_r>:
 800134c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001350:	1f18      	subs	r0, r3, #4
 8001352:	2b00      	cmp	r3, #0
 8001354:	bfbc      	itt	lt
 8001356:	580b      	ldrlt	r3, [r1, r0]
 8001358:	18c0      	addlt	r0, r0, r3
 800135a:	4770      	bx	lr

0800135c <_init>:
 800135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135e:	bf00      	nop
 8001360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001362:	bc08      	pop	{r3}
 8001364:	469e      	mov	lr, r3
 8001366:	4770      	bx	lr

08001368 <_fini>:
 8001368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800136a:	bf00      	nop
 800136c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800136e:	bc08      	pop	{r3}
 8001370:	469e      	mov	lr, r3
 8001372:	4770      	bx	lr
